services:
  postgres:
    image: postgres:15
    container_name: adtime_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_DB: adtime
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
    secrets:
      - postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgresql.conf:/etc/postgresql/postgresql.conf:ro
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d adtime"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - backend-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:rw,noexec,nosuid,nodev
      - /var/run/postgresql:rw,noexec,nosuid,nodev
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  redis:
    image: redis:7-alpine
    container_name: adtime_redis
    secrets:
      - redis_password
    command: >
      redis-server
      --requirepass $$(cat /run/secrets/redis_password)
      --appendonly yes
      --appendfsync everysec
      --save 60 1000
      --stop-writes-on-bgsave-error yes
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "$$(cat /run/secrets/redis_password)", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - backend-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:rw,noexec,nosuid,nodev
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - PYTHON_VERSION=3.12-slim
    container_name: adtime_backend
    ports:
      - "127.0.0.1:8042:8042"
    secrets:
      - postgres_password
      - redis_password
      - jwt_secret
      - kandinsky_api_key
      - kandinsky_secret_key
      - yookassa_shop_id
      - yookassa_secret_key
      - s3_access_key
      - s3_secret_key
    environment:
      PYTHONPATH: "/app"
      DATABASE_URL: "postgresql+asyncpg://postgres:$$(cat /run/secrets/postgres_password)@postgres:5432/adtime"
      REDIS_URL: "redis://:$$(cat /run/secrets/redis_password)@redis:6379/0"
      JWT_SECRET: "$$(cat /run/secrets/jwt_secret)"
      KANDINSKY_API_KEY: "$$(cat /run/secrets/kandinsky_api_key)"
      KANDINSKY_SECRET_KEY: "$$(cat /run/secrets/kandinsky_secret_key)"
      YOOKASSA_SHOP_ID: "$$(cat /run/secrets/yookassa_shop_id)"
      YOOKASSA_SECRET_KEY: "$$(cat /run/secrets/yookassa_secret_key)"
      S3_ACCESS_KEY: "$$(cat /run/secrets/s3_access_key)"
      S3_SECRET_KEY: "$$(cat /run/secrets/s3_secret_key)"
      DEBUG: "False"
      ENVIRONMENT: "production"
      PYTHONUNBUFFERED: "1"
      PYTHONDONTWRITEBYTECODE: "1"
      UVICORN_ACCESS_LOG: "false"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:rw,noexec,nosuid,nodev
      - /var/tmp:rw,noexec,nosuid,nodev
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
      - NET_BIND_SERVICE
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2'
        reservations:
          memory: 1G
          cpus: '0.5'

  nginx:
    image: nginx:alpine
    container_name: adtime_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
    networks:
      - backend-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:rw,noexec,nosuid,nodev
      - /var/cache/nginx:rw,noexec,nosuid,nodev
      - /var/run:rw,noexec,nosuid,nodev
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
      - NET_BIND_SERVICE
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  prometheus:
    image: prom/prometheus:latest
    container_name: adtime_prometheus
    volumes:
      - ./backend/app/core/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--storage.tsdb.retention.time=15d'
    networks:
      - backend-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:rw,noexec,nosuid,nodev

  crowdsec:
    image: crowdsecurity/crowdsec:latest
    container_name: adtime_crowdsec
    environment:
      COLLECTIONS: "crowdsecurity/nginx crowdsecurity/redis crowdsecurity/http-cve crowdsecurity/whitelist-good-actors"
      DISABLE_LOCAL_API: "false"
      DISABLE_AGENT: "false"
      DISABLE_ONLINE_API: "false"
    volumes:
      - ./crowdsec:/etc/crowdsec:ro
      - /var/log:/var/log:ro
      - crowdsec_data:/var/lib/crowdsec/data:rw
      - /tmp:/tmp:rw
    networks:
      - backend-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true

  loki:
    image: grafana/loki:latest
    container_name: adtime_loki
    ports:
      - "127.0.0.1:3100:3100"
    volumes:
      - ./loki:/etc/loki:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/loki-config.yml
    networks:
      - backend-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true

  promtail:
    image: grafana/promtail:latest
    container_name: adtime_promtail
    volumes:
      - ./promtail:/etc/promtail:ro
      - /var/log:/var/log:ro
    command: -config.file=/etc/promtail/promtail-config.yml
    networks:
      - backend-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true

secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  kandinsky_api_key:
    file: ./secrets/kandinsky_api_key.txt
  kandinsky_secret_key:
    file: ./secrets/kandinsky_secret_key.txt
  yookassa_shop_id:
    file: ./secrets/yookassa_shop_id.txt
  yookassa_secret_key:
    file: ./secrets/yookassa_secret_key.txt
  s3_access_key:
    file: ./secrets/s3_access_key.txt
  s3_secret_key:
    file: ./secrets/s3_secret_key.txt

networks:
  backend-network:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.28.0.0/16
    name: adtime_network

volumes:
  postgres_data:
    name: adtime_postgres_data
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/postgres
  redis_data:
    name: adtime_redis_data
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/redis
  prometheus_data:
    name: adtime_prometheus_data
  crowdsec_data:
    name: adtime_crowdsec_data
  loki_data:
    name: adtime_loki_data